using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection.Emit;

namespace FluentIL
{
	public partial class DynamicMethodBody
	{
		readonly Stack<IfEmitter> _IfEmitters = new Stack<IfEmitter>();
		public DynamicMethodBody Else()
		{
			_IfEmitters.Peek().EmitElse();
			return this;
		}

		public DynamicMethodBody EndIf()
		{
			_IfEmitters.Pop().EmitEndIf();
			return this;
		}

<#		string [] opcodes = new string [] {
			"Beq", "Beq_S", 
			"Bne_Un", "Bne_Un_S",
			"Bge", "Bge_S", "Bge_Un", "Bge_Un_S", 
			"Bgt", "Bgt_S", "Bgt_Un", "Bgt_Un_S", 
			"Ble", "Ble_S", "Ble_Un", "Ble_Un_S", 
			"Blt", "Blt_S", "Blt_Un", "Blt_Un_S", 
			"Brtrue", "Brfalse",
			"Br", "Br_S" };
		foreach (var opcode in opcodes)
		{
#>
		#region <#= opcode #>
		public DynamicMethodBody <#= opcode #>(string label)
        {
            return <#= opcode #>(GetLabel(label));
        }

        public DynamicMethodBody <#= opcode #>(Label label)
        {
            return Emit(OpCodes.<#= opcode #>, label);
        }

<#		if (!opcode.StartsWith("Br") && 
		!opcode.StartsWith("Bge") && !opcode.EndsWith("_S")
		&& !opcode.Equals("Ble") && !opcode.Equals("Ble_Un") 
		&& !opcode.Equals("Bne_Un")
		) { #>
		public DynamicMethodBody C<#= opcode.Substring(1) #>()
		{
			return Emit(OpCodes.C<#= opcode.Substring(1) #>);
		}

		public DynamicMethodBody If<#= opcode.Substring(1) #>()
		{
			var emitter = new IfEmitter(this);
			_IfEmitters.Push(emitter);
			emitter.EmitIf(OpCodes.C<#= opcode.Substring(1) #>);
			return this;
		}

		public DynamicMethodBody IfNot<#= opcode.Substring(1) #>()
		{
			var emitter = new IfEmitter(this);
			_IfEmitters.Push(emitter);
			emitter.EmitIfNot(OpCodes.C<#= opcode.Substring(1) #>);
			return this;
		}

<#		}#>
		#endregion

<#
		}
#>
	}
}
