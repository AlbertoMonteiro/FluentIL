using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection.Emit;
using System.Reflection;
using System.Diagnostics;

namespace FluentIL
{
	public partial class DynamicMethodBody
	{
		readonly Stack<Action> PreEmitActions = new Stack<Action>();
		private void ExecutePreEmitActions()
		{
			while ( PreEmitActions.Count > 0 ) 
                PreEmitActions.Pop()();
		}

		#region Emit (basic)
        public DynamicMethodBody Emit(OpCode opcode)
        {
			ExecutePreEmitActions();
			#if DEBUG
			Debug.WriteLine(string.Format("\t{0}", opcode));
			#endif
            _Info.GetILGenerator()
                .Emit(opcode);

            return this;
        }
        #endregion


<#		string [] types = new string [] {
			"string", "int", "double", "Label", "MethodInfo", "ConstructorInfo", "FieldInfo" };
		foreach (var t in types)
		{
#>
		public DynamicMethodBody Emit(OpCode opcode, <#=t#> arg)
        {
			ExecutePreEmitActions();
			#if DEBUG
			<#if (t=="Label") {#>
			Debug.WriteLine("\t{0} IL_{1}", opcode, arg.GetHashCode());
			<#} else if (t=="FieldInfo") {#>
			Debug.WriteLine("\t{0} {1}", opcode, arg.Name);
			<#} else if (t=="string") {#>
			Debug.WriteLine("\t{0} \"{1}\"", opcode, arg);
			<#} else {#>
			Debug.WriteLine("\t{0} {1}", opcode, arg.ToString());
			<#}#>
			#endif
			
			_Info.GetILGenerator()
                .Emit(opcode, arg);

            return this;
        }

<#
		}
#>
	}
}
